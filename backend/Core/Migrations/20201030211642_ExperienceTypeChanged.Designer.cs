// <auto-generated />
using System;
using Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Core.Migrations
{
    [DbContext(typeof(PoeContext))]
    [Migration("20201030211642_ExperienceTypeChanged")]
    partial class ExperienceTypeChanged
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0-rc.2.20475.6");

            modelBuilder.Entity("Core.Models.Account", b =>
                {
                    b.Property<string>("AccountName")
                        .HasColumnType("text");

                    b.Property<string>("TwitchUsername")
                        .HasColumnType("text");

                    b.HasKey("AccountName");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountName = "nugiyen",
                            TwitchUsername = "nugiyen"
                        },
                        new
                        {
                            AccountName = "helman",
                            TwitchUsername = "Helman"
                        },
                        new
                        {
                            AccountName = "raizqt",
                            TwitchUsername = "RaizQT"
                        },
                        new
                        {
                            AccountName = "dclara",
                            TwitchUsername = "DCLara1"
                        },
                        new
                        {
                            AccountName = "havoc6",
                            TwitchUsername = "havoc616"
                        },
                        new
                        {
                            AccountName = "alkaizerx",
                            TwitchUsername = "alkaizerx"
                        },
                        new
                        {
                            AccountName = "pinytenis",
                            TwitchUsername = "Bakedchicken"
                        },
                        new
                        {
                            AccountName = "cohhcarnage",
                            TwitchUsername = "cohhcarnage"
                        });
                });

            modelBuilder.Entity("Core.Models.Datapoint", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Charname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Dead")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Experience")
                        .HasColumnType("numeric");

                    b.Property<int?>("GlobalRank")
                        .HasColumnType("integer");

                    b.Property<string>("LeagueId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<bool?>("Online")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("LeagueId", "Charname", "Timestamp");

                    b.HasIndex("Timestamp", "LeagueId", "Id");

                    b.ToTable("Datapoints");
                });

            modelBuilder.Entity("Core.Models.League", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EndAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("StartAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EndAt");

                    b.HasIndex("StartAt");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("Core.Models.Datapoint", b =>
                {
                    b.HasOne("Core.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("League");
                });
#pragma warning restore 612, 618
        }
    }
}
